## I didn't know Queryset could do that

1. Basic Queryset method
	- Methods that return QuerySet
		- all
		- filter
		- exclude
		- oder_by
		- reverse
		- distinct
		- annotate
	- Methods that return model instance
		- get
		- first
		- last
		- latest
		- earliest
		- exists
		- count
		- aggregate
	- `annotate` and `aggregate` both expect a expression
		- annotate will compute that for each item in the set. Returns each item with new property
		- aggregate will return a dictionary with that value for entire set
		- Django will create property if not provided
		```python
		products = products.annotate(Count('item'))
		products.first().item__count

		grand_total = orders.aggregate(Sum('total'))
		grand_total['total__sum']
		```
		- Tend to be faster than for loops
2. Unbasis
	- select_related: Allows getting related objects using single query via JOINs. 
	- prefetch_related: Similar to select_related will do JOINs in Python
	- defer: Allows to fetch all except specified query
	- only: Allows to fetch selected fields only
	- using
	- values
	- values_list
	- in_bulk: You pass it list of IDs and returns a dictionary of ID to Model Instance
	- bulk_create
	- When you access FK relation django issues a DB query
3. Conjunction Dysfunctional
	- When specifying attributes in filter method of QuerySet it generates SQL query with underlying AND construct
4. How to handle OR queries:
	- QuerySet is different from a list. On list you can't filter on it etc. 
	- `Q` E.g. find all users with certain name keywords
	```python
	users = User.objects.filter(
		Q(first_name__icontains='kelly') |
		Q(last_name__icontains='kelly') |
		Q(email__icontains='kelly')
	).order_by('last_name')
	```
	- You can create as complex of an expression as you want with bitwise OR and NOT
5. Query Arithmetic
	- `F`, while `Q` represented query contraint. F represents an implicit refrence in DB calls
	```python
	item_sum = Sum(F('unit_price') * F('quantity'))
	total = items.aggregate(amount=item_sum).get('amount', 0)
	```
6. `F` expressions are examples of Django's **Query Expressions**. This includes:
	- Avg
	- Count
	- Max
	- StdDev
	- Sum
	- Variance
	- Coalesce
	- Concat
	- Greatest
	- Least
	- Length
	- Lower
	- Now
	- Substr
	- Upper
7. Query expressions also include:
	- F
	- Aggregate
	- Func
	- Value
	- ExpressionWrapper
	- Conditional
8. Writing custom query expressions, you have to define following methods:
	- as_sql
	- as_<vendorname>
	- get_lookup
	- get_transform
	- output_field
9. If you're writing RAW SQL you should probably rethink what you're about to do
10. Writing RAW SQLs
	- EXTRA
	```python
	Order.objects.extra(
		select={"is_recent": "ordered_at > 2016-01-01"}
	)
	- Other options
		- select
		- where
		- tables
		- order_by
		- select_params
		- params
	```python
	Order.objects.raw("""
		SELECT * FROM ...
	""")
	```
	```


